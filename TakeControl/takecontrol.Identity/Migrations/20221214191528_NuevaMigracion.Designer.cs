// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using takecontrol.Identity;

#nullable disable

namespace takecontrol.Identity.Migrations
{
    [DbContext(typeof(TakeControlIdentityDbContext))]
    [Migration("20221214191528_NuevaMigracion")]
    partial class NuevaMigracion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c35472be-9e6e-41d6-a2a5-14b46df8a4aa"),
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("bb37520a-638c-443f-8988-cd656a9e92ff"),
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        },
                        new
                        {
                            Id = new Guid("9afe48f3-6e13-4fd6-be43-cdaecf4f2674"),
                            Name = "Club",
                            NormalizedName = "CLUB"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("3e3acdb3-bcee-4d52-bbe0-4cc8e73142ca"),
                            RoleId = new Guid("c35472be-9e6e-41d6-a2a5-14b46df8a4aa")
                        },
                        new
                        {
                            UserId = new Guid("6d5dc714-11a4-4d1c-8bb3-b668cbea0f5e"),
                            RoleId = new Guid("9afe48f3-6e13-4fd6-be43-cdaecf4f2674")
                        },
                        new
                        {
                            UserId = new Guid("53615aac-95ec-4354-8350-ff75f1351107"),
                            RoleId = new Guid("bb37520a-638c-443f-8988-cd656a9e92ff")
                        },
                        new
                        {
                            UserId = new Guid("f9eefd29-b6b3-4517-9613-95b238540240"),
                            RoleId = new Guid("bb37520a-638c-443f-8988-cd656a9e92ff")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("takecontrol.Identity.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e3acdb3-bcee-4d52-bbe0-4cc8e73142ca"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "981da0bb-2412-4b8e-92b2-b10f4521a5f2",
                            Email = "alevelara@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Alejandro",
                            NormalizedEmail = "ALEVELARA@GMAIL.COM",
                            NormalizedUserName = "ALEVELARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEFVwpY1lksvCkrcuZ7ERy0VuIKWhB6V2z/PrwSx/GQBH3ugkbSnEDnIX30T3ZU7ODA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ef157ff-51fe-48fb-8eb5-5f807dda6823",
                            TwoFactorEnabled = false,
                            UserName = "alevelara",
                            UserType = 1
                        },
                        new
                        {
                            Id = new Guid("53615aac-95ec-4354-8350-ff75f1351107"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ffe0d79-27f0-408b-b3b2-9159c9b4de5b",
                            Email = "alevelara@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Alberto",
                            NormalizedEmail = "ALEVELARA@LOCALHOST.COM",
                            NormalizedUserName = "ANTOGONMAR",
                            PasswordHash = "AQAAAAIAAYagAAAAEKccyLPoQJUM/4RwKR1YPdKDtjMQ4xzirDnzrQCxaSwR27mODdiFO0e7QV1uZKGHIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "612b4a89-c7c2-4f9e-8f40-49d93b38eb2e",
                            TwoFactorEnabled = false,
                            UserName = "antgonmar",
                            UserType = 3
                        },
                        new
                        {
                            Id = new Guid("6d5dc714-11a4-4d1c-8bb3-b668cbea0f5e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a7e1bd8-0666-4c13-96b8-d2a56c189639",
                            Email = "club@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "PadelClubTest",
                            NormalizedEmail = "CLUB@LOCALHOST.COM",
                            NormalizedUserName = "ANTOGONMAR2",
                            PasswordHash = "AQAAAAIAAYagAAAAEN8/aI5B+SCsqmyODNgVVdaMTdwzLBMyM4WPvH4J8ScRSfDdVFa6PmUXRtLDC8MLPQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b4021e8-e202-4006-b2ac-f9f52274ed6b",
                            TwoFactorEnabled = false,
                            UserName = "antgonmar2",
                            UserType = 2
                        },
                        new
                        {
                            Id = new Guid("f9eefd29-b6b3-4517-9613-95b238540240"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bdb10e0a-a8ce-425d-a699-92b09266257a",
                            Email = "player2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "player 2",
                            NormalizedEmail = "PLAYER2@GMAIL.COM",
                            NormalizedUserName = "PLAYER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEJU/5a4rrmxvU5D5MwcQ1I1aNTWSvmk01Y8jC4suDsz8op/iRVSAFVY6QyjMNJ8k6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8419ef35-8ef0-4c2e-b888-1811f8b6d289",
                            TwoFactorEnabled = false,
                            UserName = "player2",
                            UserType = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("takecontrol.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("takecontrol.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("takecontrol.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("takecontrol.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
