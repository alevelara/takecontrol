// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using takecontrol.Identity;

#nullable disable

namespace takecontrol.Identity.Migrations
{
    [DbContext(typeof(TakeControlIdentityDbContext))]
    partial class TakeControlIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("78337060-9f1a-4fea-adf8-3a6697fb8177"),
                            Name = "Administrator",
                            NormalizedName = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("16177e60-2a44-485e-ab55-1aaaf0cb11a8"),
                            Name = "Player",
                            NormalizedName = "Player"
                        },
                        new
                        {
                            Id = new Guid("21828f52-c104-4cf6-8e86-1da026b6453a"),
                            Name = "Club",
                            NormalizedName = "Club"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("ac1f186e-dbbd-4e3f-8fb9-cfb14914bd2c"),
                            RoleId = new Guid("78337060-9f1a-4fea-adf8-3a6697fb8177")
                        },
                        new
                        {
                            UserId = new Guid("f0b508ac-d809-47d7-a226-925624aaf5c8"),
                            RoleId = new Guid("21828f52-c104-4cf6-8e86-1da026b6453a")
                        },
                        new
                        {
                            UserId = new Guid("5c8c1b5d-a407-45d7-8905-f6540907206f"),
                            RoleId = new Guid("16177e60-2a44-485e-ab55-1aaaf0cb11a8")
                        },
                        new
                        {
                            UserId = new Guid("fbf0eec1-eeed-4be2-95ed-5d005a497588"),
                            RoleId = new Guid("16177e60-2a44-485e-ab55-1aaaf0cb11a8")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("takecontrol.Identity.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ac1f186e-dbbd-4e3f-8fb9-cfb14914bd2c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d1ab493-7826-4f69-ab86-d7e7c397cd62",
                            Email = "alevelara@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Alejandro",
                            NormalizedEmail = "ALEVELARA@GMAIL.COM",
                            NormalizedUserName = "ALEVELARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEDuI2DZJM8O4TZFDMmj1UxRCySg1Y0P/qxxICkR4UswGueREF3Nm90rY9qrxaeAxeg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc418660-81ec-4068-bc11-7c3ed4d34751",
                            TwoFactorEnabled = false,
                            UserName = "alevelara",
                            UserType = 1
                        },
                        new
                        {
                            Id = new Guid("5c8c1b5d-a407-45d7-8905-f6540907206f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "617e1a9b-0993-4eb7-96e0-a27c02e8fa4d",
                            Email = "alevelara@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Alberto",
                            NormalizedEmail = "ALEVELARA@LOCALHOST.COM",
                            NormalizedUserName = "ANTOGONMAR",
                            PasswordHash = "AQAAAAIAAYagAAAAEAI//ayoaU2T3Ltl2zf0jVdcUzzNXqqQquCPccrtu2RNjs4tmGxNfyMqZV/d3QrRnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14295d6f-d242-463a-bc3f-08dca6d14894",
                            TwoFactorEnabled = false,
                            UserName = "antgonmar",
                            UserType = 3
                        },
                        new
                        {
                            Id = new Guid("f0b508ac-d809-47d7-a226-925624aaf5c8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d8dbda2-82c5-4e69-bc52-04b86d30c280",
                            Email = "club@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "PadelClubTest",
                            NormalizedEmail = "CLUB@LOCALHOST.COM",
                            NormalizedUserName = "ANTOGONMAR2",
                            PasswordHash = "AQAAAAIAAYagAAAAEA3rl4hz1w64dsuOYl8KjglWOEI6pkim/B1dANb5cjEH+hsY9nNvwh2OEJq6iOpaNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df278af4-dae0-444c-8f66-aae0f83b9e12",
                            TwoFactorEnabled = false,
                            UserName = "antgonmar2",
                            UserType = 2
                        },
                        new
                        {
                            Id = new Guid("fbf0eec1-eeed-4be2-95ed-5d005a497588"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "caf9d569-01db-4f5b-b2c6-ba9bcc77e2cc",
                            Email = "player2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "player 2",
                            NormalizedEmail = "PLAYER2@GMAIL.COM",
                            NormalizedUserName = "PLAYER2",
                            PasswordHash = "AQAAAAIAAYagAAAAELZDm6+ZqtbBY0ME4JNHmqbZU3oN+kMoQeeRQ80j+LMSUKwVW+Ee/gsiM40JlXhYkQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c33546a-0e4e-48ab-9f70-9fb5d467fb0a",
                            TwoFactorEnabled = false,
                            UserName = "player2",
                            UserType = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("takecontrol.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("takecontrol.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("takecontrol.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("takecontrol.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
